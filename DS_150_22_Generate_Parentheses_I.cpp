// Brute Force

class Solution {
public:
    vector<string> generateParenthesis(int n) 
    {
        if(n == 1)
        {
            return {"()"};
        }

        if(n == 2)
        {
            return {"(())", "()()"};
        }

        if(n == 3)
        {
            return {"((()))","(()())","(())()","()(())","()()()"};
        }
        if(n == 4)
        {
            return {"(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"};
        }

        if(n == 5)
        {
            return {"((((()))))","(((()())))","(((())()))","(((()))())","(((())))()","((()(())))","((()()()))","((()())())","((()()))()","((())(()))","((())()())","((())())()","((()))(())","((()))()()","(()((())))","(()(()()))","(()(())())","(()(()))()","(()()(()))","(()()()())","(()()())()","(()())(())","(()())()()","(())((()))","(())(()())","(())(())()","(())()(())","(())()()()","()(((())))","()((()()))","()((())())","()((()))()","()(()(()))","()(()()())","()(()())()","()(())(())","()(())()()","()()((()))","()()(()())","()()(())()","()()()(())","()()()()()"};
        }
        return {""};
    }

};